---
title: Homework 4
date: 2024-11-07
author:
  - name: Kevin Silberberg
    id: ks
    orcid: 0009-0009-4825-1865
    email: ksilberb@ucsc.edu
    affiliation:
      - name: University of California Santa Cruz
        city: Santa Cruz
        state: CA
        href: https://www.ucsc.edu
format:
  html:
    theme: darkly
    toc: true
    code-fold: true
    code-links:
    - icon: github
      href: https://github.com/KevySilb/AM238
  pdf:
    pdf-engine: lualatex
    monofont: "DejaVu Sans Mono"
    toc: true
    number-sections: true
    documentclass: article
jupyter: julia-1.11
execute:
  eval: false
---

# Question 1

Consider the system of SDEs \footnotemark

\begin{equation}\tag{1}\label{eq:SDE}
	\begin{cases}
		dX(t;\omega) &= -X(t;\omega)^3dt + dY(t;\omega) \\
		dY(t;\omega) &= -\tau Y(t;\omega)dt + \sigma dW(t;\omega)
	\end{cases}
\end{equation}

where $\sigma, \tau \leq 0$ are given parameters and $W(t;\omega)$ is a Wiener process. The initial condition $(X(0;\omega), Y(0;\omega))$ has i.i.d. components both of which are uniformly distributed in $[0, 1]$, i.e., $X(0;\omega)$ and $Y(0;\omega)$ are independent random variables with uniform PDF in $[0,1]$.

\footnotetext{The system \eqref{eq:SDE} is a prototype IVP where $X(t;\omega)$ is driven by the Ornstein-Uhlenbeck process $Y(t;\omega)$, which is a colored (non-white) random noise with exponential correlation function.}
## Part A

Plot a few sample paths of $X(t;\omega)$ for $\sigma = 0.1$ and $\tau = \{0.01, 1, 10\}$.

### Solution

We convert \eqref{eq:SDE} into a numerical simulation by first converting the SDE into a discrete time form via the Euler-Maruyama discretization. 

We descritize a grid within the interval [0, T] into N equal parts, where $\Delta t = \frac{T}{N}$

Let us recursively define $Y_n$ for $0 \leq n \leq N-1$

\begin{align}
	Y_{n+1} = Y_n  -\tau Y_n \Delta t + \sigma \Delta W
\end{align}

and $X_n$

\begin{align}
	X_{n+1} = X_n - X_n^3 \Delta t + \Delta Y_n
\end{align}

where $\Delta Y_n = Y_{n+1} - Y_n = -\tau Y_n \Delta t + \sigma \Delta W_n$

where $\Delta W_n$ are i.i.d Gaussian random variables with zero mean and variance $\Delta t$.

```{julia}
using GLMakie
using Distributions

function partA(τ::Float64, σ::Float64)
    # define the length of subintervals
    Δt = 1e-4
    ts = 0.0:Δt:5.0
    # number of samples
    N = 5
    # Weiner processs
    W = Normal(0, sqrt(Δt))
    # initialize mesh
    X = Matrix{Float64}(undef, length(ts), N)
    Y = Matrix{Float64}(undef, length(ts), N)

    # apply initial conditions
    for i in 1:N
        X[1, i] = rand()
        Y[1, i] = rand()
    end
    # propagate the process
    for i in 1:N
        for j in 2:length(ts)
            X[j, i] = X[j-1, i] - (X[j-1, i]^3)*Δt -τ*Y[j-1, i]*Δt + σ*rand(W)
            Y[j, i] = Y[j-1, i] - τ*Y[j-1, i]*Δt + σ*rand(W)
        end
    end
    # make the figure
    fig = Figure()
    ax = Axis(
        fig[1, 1],
        title = "σ = $σ τ = $τ",
        xlabel = "t",
        ylabel = L"$X_{n+1}$"
    )
    # set y axis limits
    ylims!(ax, -1.0, 1.0)

    # Plot the samples
    for i in 1:N
        lines!(ax, ts, X[:, i])
    end
    return fig
end
save("parta01.png", partA(0.01, 0.1))
save("parta1.png", partA(1.0, 0.1))
save("parta10.png", partA(10.0, 0.1))
```
:::: {.columns}

::: {.column width="33.33%"}
![$\tau = 0.01$](hw4_files/media/parta01.png){width=100%}
:::

::: {.column width="33.33%"}
![$\tau = 1.0$](hw4_files/media/parta1.png){width=100%}
:::

::: {.column width="33.33%"}
![$\tau = 10.0$](hw4_files/media/parta10.png){width=100%}
:::

::::

## Part B

Do you expect the system \eqref{eq:SDE} to have a statistically stationary state? Justify your answer.

### Solution

From part A, we can see that as we increase $\tau$, the system rapidly converges to a statistically steady-state process. We can prove this by the Kernel Density Estimation for 1000 sample paths for varying $\tau$ and comparing the estimated PDF for later times.

The solution approaches a statistically steady state as $t\rightarrow \infty$ and approaches the statisically steady state at the rate $\tau$.

```{julia}
using KernelDensity

function simulateB(τ::Float64)
    σ = 0.1
    # define the length of subintervals
    Δt = 1e-4
    ts = 0.0:Δt:20.0
    # number of samples
    N = 1000
    # Weiner processs
    W = Normal(0, sqrt(Δt))
    # initialize mesh
    X = Matrix{Float64}(undef, length(ts), N)
    Y = Matrix{Float64}(undef, length(ts), N)

    # apply initial conditions
    for i in 1:N
        X[1, i] = rand()
        Y[1, i] = rand()
    end
    # propagate the process
    for i in 1:N
        for j in 2:length(ts)
            X[j, i] = X[j-1, i] - (X[j-1, i]^3)*Δt -τ*Y[j-1, i]*Δt + σ*rand(W)
            Y[j, i] = Y[j-1, i] - τ*Y[j-1, i]*Δt + σ*rand(W)
        end
    end
    return X, Y, length(ts)
end

function partB()
    X1, Y1, ts = simulateB(0.01)
    X2, Y2, _ = simulateB(1.0)
    X3, Y3, _ = simulateB(10.0)
    
    fig = Figure()
    ax = Axis(
        fig[1, 1]
    )
    ylims!(ax, 0.0, 3.0)
    xlims!(ax, -2.0, 2.0)

    d1 = kde(X1[1, :])
    d2 = kde(X2[1, :])
    d3 = kde(X3[1, :])    
    kde_data1 = Observable((d1.x, d1.density))
    kde_data2 = Observable((d2.x, d2.density))
    kde_data3 = Observable((d3.x, d3.density))
    
    kde_line1 = lines!(ax, [0.0], [0.0], color = :red, label = "τ = 0.01")
    kde_line2 = lines!(ax, [0.0], [0.0], color = :blue, label = "τ = 1.0")
    kde_line3 = lines!(ax, [0.0], [0.0], color = :green, label = "τ = 10.0")

    kde_plot1 = lift(kde_data1) do (x, density)
        kde_line1[1] = x
        kde_line1[2] = density
    end
    kde_plot2 = lift(kde_data2) do (x, density)
        kde_line2[1] = x
        kde_line2[2] = density
    end
    kde_plot3 = lift(kde_data3) do (x, density)
        kde_line3[1] = x
        kde_line3[2] = density
    end

    Legend(fig[1, 2], ax)
    record(fig, "partb.mp4", 2:400:ts; framerate = 30) do k
        d1 = kde(X1[k, :])
        d2 = kde(X2[k, :])
        d3 = kde(X3[k, :])
        kde_data1[] = (d1.x, d1.density)
        kde_data2[] = (d2.x, d2.density)
        kde_data3[] = (d3.x, d3.density)
    end
    return fig
end
partB();
```
::: {.content-visible when-format="pdf"}
\begin{center}
	\includegraphics[width=0.6\linewidth]{hw4_files/media/partb1a.png}
	\vspace{5mm}
	\includegraphics[width=0.6\linewidth]{hw4_files/media/partb1b.png}
	\vspace{5mm}
	\includegraphics[width=0.6\linewidth]{hw4_files/media/partb1c.png}
	\vspace{5mm} \\
	\textbf{Watch the full video:} \href{}{here}.
\end{center}
:::

::: {.content-visible when-format="html"}
<video width="700" autoplay loop muted>
	<source src="hw4_files/media/partb.mp4" type="video/mp4">
	Your browser does not support the video tag.
</video>
:::

## Part C

Write the Fokker-Planck equation for the joint PDF of $X(t;\omega)$ and $Y(t;\omega)$.

### Solution

Let us rewrite \eqref{eq:SDE} in state-space form

\begin{align}
	dX_1 &= -X_1^3 dt - \tau X_2 dt + \sigma dW_1 \\
	dX_2 &= -\tau X_2 dt + \sigma dW_2
\end{align}

The vector $\mathbf{G}(\mathbf{X}, t)$ can be written as 

\begin{align}
	 \mathbf{G}(\mathbf{X}, t) &= \left[
	 \begin{matrix}
		 -X_1^3 - \tau X_2 \\
		 -\tau X_2
	 \end{matrix}\right]
\end{align}

The matrix $\mathbf{S}$ can be written as

\begin{align}
	\mathbf{S} = \left[
	\begin{matrix}
		\sigma & 0 \\
		0 & \sigma
	\end{matrix}\right]
\end{align}

We can thus write the Fokker-Planck equation according equation 59 in course notes 4 as follows:

\begin{align}
	\frac{\partial p(\mathbf{x}, t)}{\partial t} &= -\sum_{k=1}^{2} \frac{\partial}{\partial x_k} \left(G_k(\mathbf{x}, t) p(\mathbf{x})\right) + \frac{1}{2} \sum_{i, k = 1}^2 \frac{\partial^2}{\partial x_i \partial x_k}\left(\sum_{j=1}^2 S_{ij}(\mathbf{x}, t)S_{kj}(\mathbf{x}, t) p(\mathbf{x}, t) \right) \\
&= \frac{\partial}{\partial x_1}\left((x_1^3 + \tau x_2)p\right) + \frac{\partial}{\partial x_2}(\tau x_2 p) + \frac{\sigma^2}{2}\left(\frac{\partial^2p}{\partial x_1^2} + \frac{\partial^2p}{\partial x_2^2}\right) \\
&= 3px_1^2 + x_1^3 \frac{\partial p}{\partial x_1} + \tau x_2 \frac{\partial p}{\partial x_1} + \frac{\sigma^2}{2}\left(\frac{\partial^2p}{\partial x_1^2} + \frac{\partial^2p}{\partial x_2^2}\right)
\end{align}

The Fokker-Planck equation is thus

\begin{equation}\tag{2}\label{eq:fokker-planck}
\frac{\partial p}{\partial t} = 3px_1^2 + x_1^3 \frac{\partial p}{\partial x_1} + \tau x_2 \frac{\partial p}{\partial x_1} + \frac{\sigma^2}{2}\left(\frac{\partial^2p}{\partial x_1^2} + \frac{\partial^2p}{\partial x_2^2}\right)
\end{equation}


## Part D

Write the reduced-order equation for the joint PDF of $X(t;\omega)$ in terms of the conditional expectation $\mathbb{E}\{Y(t;\omega)|X(t;\omega)\}$. 

HINT: Integrate the Fokker-Planck equation with respect to $y$ and use the definition of conditional PDF.

### Solution

## Part E

Set $\sigma = 0$. Compute the conditional expectation $\mathbb{E}\{Y(t;\omega) | X(t;\omega)\}$ explicity as a function of 
$t$ and substitute it in the reduced order equation you obtained in part d (with $\sigma = 0$) to obtain an exact (and closed) equation for the PDF of $X(t;\omega)$.

### Solution

## Part F

Write the PDF equation you obtained in part e as an evolution equation for the cumulative distribution function (CDF) of $X(t;\omega)$.

### Solution
